map <space> <leader>
map <leader>q :q<cr>
map <leader>w :w<cr>

" Ugh. This keeps a palm tap on the touchpad from being detected as a
" middle-click and pasting crap all over the buffer.
map <MiddleMouse> <Nop>
map <2-MiddleMouse> <Nop>
map <3-MiddleMouse> <Nop>
map <4-MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>
imap <2-MiddleMouse> <Nop>
imap <3-MiddleMouse> <Nop>
imap <4-MiddleMouse> <Nop>

map Y y$
map <leader>y "+y
map <leader>Y "+y$
map <leader>d "+d
map <leader>D "+d$
map <leader>p "+p
map <leader>P "+P
nmap <leader>j ddp
nmap <leader>k ddkP
map <silent> <leader><cr> :set hlsearch!<cr>
map <silent> <leader>n :NERDTreeToggle<cr>
map <silent> <leader><space> <nop>
map <leader>= <C-w>=

map <leader>be :BufExplorer<cr>

imap <c-p> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>

nmap <backspace> :set hlsearch!<cr>
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>

" Don't leave visual mode after indent
vnoremap > >gv
vnoremap < <gv

" I literally never mean a bare u without preceding it with a g, and it causes
" shenanigans constantly.
vnoremap u <Nop>
vnoremap U <Nop>

set wildignorecase
set wildmode=longest,list,full
set wildmenu
set undofile
set undodir=$HOME/.vimundo/

set splitright
set splitbelow

set nowrap
set textwidth=80

set cursorline

let g:neomake_open_list=0
autocmd! BufWritePost * Neomake

if executable('ag')
  let g:ackprg = 'ag'

  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " K searches the project for the word under the cursor
  nnoremap K :Ack! "\b<C-R><C-W>\b"<CR>

  " In visual mode, K searches the project for the selected text
  vnoremap K "vy:Ack! "<C-R>""<CR>

  " Immensely janky find and replace.
  " Here mostly so I remember I can do `cfdo`.
  function Far(from, to)
    let l:oldhighlight = g:ackhighlight
    let g:ackhighlight = 1
    exec "Ack '" . a:from . "'"
    exec "cfdo %s//" . a:to . "/gc | update"
    let g:ackhighlight = l:oldhighlight
  endfunction

  command -nargs=+ Far call Far(<f-args>)
  command -nargs=+ Ag :Ack <args>
endif

" Airline styling
let g:airline_section_x='' " Don't display filetype
let g:airline_section_b='' " Don't display branch
let g:airline_section_z='%p:%v' " Less flashy line:column display
"let g:prettier#autoformat = 0
"autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql Prettier

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0

" neco-ghc
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
let g:necoghc_enable_detailed_browse = 1
let g:necoghc_use_stack = 1

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\}
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tsserver', 'tslint'],
\   'mustache': ['ember-template-lint'],
\}

colorscheme ron
let g:airline_theme='luna'
set bg=dark
