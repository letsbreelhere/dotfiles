#!/usr/bin/env python

import argparse
import os
import shutil

parser = argparse.ArgumentParser(description="Setup script")
parser.add_argument("-v", "--verbose", action="store_true", help="Run verbosely")
parser.add_argument("-d", "--dry-run", action="store_true", help="Run but do not create symlinks (implies verbosity)")
parser.add_argument("-f", "--force", action="store_true", help="Overwrite existing files with symlinks")
parser.add_argument("-e", "--error", action="store_true", help="Raise error when existing files conflict with symlinks")
args = parser.parse_args()
verbose = args.verbose or args.dry_run
dry_run = args.dry_run
force = args.force
warn = not args.error

IGNORED_DIRS = {".git/"}
IGNORED_FILES = {"setup", "README.md", "pacman-pkgs.txt"}

for root, dirs, files in os.walk(".", topdown=True):
    for file in files:
        full_path = os.path.abspath(os.path.join(root, file))
        relative_path = os.path.relpath(full_path, start=os.getcwd())

        if (
            not os.path.isdir(full_path)
            and not any(relative_path.startswith(ignored_dir) for ignored_dir in IGNORED_DIRS)
            and file not in IGNORED_FILES
        ):
            new_path = os.path.expanduser(os.path.join("~", relative_path))
            new_dir = os.path.dirname(new_path)

            if verbose:
                print(f"{full_path} -> {new_dir}")

            if not dry_run:
                os.makedirs(new_dir, exist_ok=True)
                try:
                    os.symlink(full_path, new_path)
                except OSError as e:
                    if force:
                        print(f"Overwriting {new_path}")
                        os.remove(new_path)
                        os.symlink(full_path, new_path)
                    elif warn:
                        print(f"{new_path} already exists")
                    else:
                        raise e

print("""
Created symlinks

Running post-symlink setup...
""")
# Install pacman packages
print("Installing pacman packages")
os.system("sudo pacman -S --needed - < pacman-pkgs.txt")

# Set zsh as default shell, if not already
if not os.environ["SHELL"].endswith("zsh"):
    print("Setting zsh as default shell")
    os.system("chsh -s $(which zsh)")

print("Creating untracked config files")
os.system("touch ~/.zsh/secrets.zsh")
os.system("mkdir -p ~/.config/zsh")

# Create a ssh key if one does not exist
if not os.path.exists(os.path.expanduser("~/.ssh/id_rsa.pub")):
    print("Creating ssh key")
    os.system("ssh-keygen -t rsa -b 4096 -C \"\" -f ~/.ssh/id_rsa2 -N \"\"")

print("Done!")
print("""
Next steps:

* Make yourself a sudoer:
    * sudo EDITOR=nvim visudo
    * Add the following line to the end of the file:
        * %sudo ALL=(ALL:ALL) ALL
        * OR
        * %sudo ALL=(ALL:ALL) NOPASSWD: ALL
    * sudo groupadd sudo
    * sudo usermod -aG sudo $USER

* Add your ssh key to github
      * cat ~/.ssh/id_rsa.pub | xclip -selection clipboard
      * Go to https://github.com/settings/keys
""")
